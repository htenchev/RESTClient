//
//  Request.swift
//  RESTClient
//
//  Created by Hristo Tentchev on 9/25/17.
//  Copyright Â© 2017 Tumba Solutions. All rights reserved.
//

import Foundation

// The APIRequest protocol: those, who conform to it can load data by
// feeding the load function a requestable and a callback, in which they
// can handle request results.
// The modelFromData function returns a wrapped instance of an object,
// representing a type in the app logic (a model object).
protocol APIRequest: class {
    associatedtype Model
    
    func load(requestable: Requestable, completion: @escaping (String, Model?) -> Void)
    static func modelFromData(data: Data) -> Model?
}

// The default implementation of load simply performs the request, generated by requestable
// and calls the completion with the wrapped result.
extension APIRequest {
    func load(requestable: Requestable, completion: @escaping (String, Model?) -> Void) {
        let configuration = URLSessionConfiguration.ephemeral
        let session = URLSession(configuration: configuration, delegate: nil, delegateQueue: OperationQueue.main)
        
        guard let urlRequest = requestable.urlRequest else {
            completion("Bad request object.", nil)
            return
        }

        guard let url = urlRequest.url else {
            completion("Bad request url", nil)
            return
        }
        
        print("Request for \(url.absoluteString) :")
        
        let task = session.dataTask(with: urlRequest, completionHandler: {
        (data: Data?, response: URLResponse?, error: Error?) -> Void in
            guard let mydata = data else {
                completion("Cannot parse data.", nil)
                return
            }
            
            prettyPrintData(data: mydata)
            
            guard let httpResponse = response as? HTTPURLResponse else {
                completion("Unable to cast response.", nil)
                return
            }
            
            print("Status \(httpResponse.statusCode)")
            
            if httpResponse.statusCode != 200 {
                completion("HTTP Error: \(httpResponse.statusCode)", nil)
                return
            }
            
            if (mydata.isEmpty) {
                completion("", nil)
            }
            
            completion("", Self.modelFromData(data: mydata))
        })
        
        task.resume()
    }
}

// This is the reqest class. It's used like this: (let's say we want to login)
// let request = RESTRequest<LoginResult>(API.login("todor@mars.bg", "tainaparola1234"))
// reqeust.execute(completion: { (error: String, data: Data?) in ... })
class RESTRequest<ResourceType: ModelType> : APIRequest {
    var requestable: Requestable
    
    init(requestable: Requestable) {
        self.requestable = requestable
    }
    
    // To see if we can acutally request the ResourceType kind of object from
    // the server, we check wether our requestable allows it.
    func isInputConsistentWithOutput() -> Bool {
        guard let resourceClass = ResourceType.self as? AnyClass else {
            return false
        }
        
        return requestable.resultType == NSStringFromClass(resourceClass)
    }
    
    // Convert data to JSON an let the Model classes handle parsing
    static func modelFromData(data: Data) -> ResourceType? {
        guard let jsonObject = try? JSONSerialization.jsonObject(with: data, options: []) else {
            return nil
        }
        
        if jsonObject is JSONDictionary {
            return ResourceType.create(jsonDict: JSONDictionary()) as? ResourceType
        }
        else if jsonObject is JSONArray {
            return nil // TODO: return a model object(or an array of model objects)
        }
        
        return nil
    }
    
    fileprivate func execute(completion: @escaping (String, ResourceType?) -> Void) {
        if !isInputConsistentWithOutput() {
            assert(false)
            completion("Input inconsistent with output. Cannot request a \(ResourceType.self) with a \(requestable) type of request.", nil)
            return
        }
        
        load(requestable: self.requestable, completion: completion)
    }
}


